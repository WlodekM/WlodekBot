<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Browse - <ss>bot.username</ss></title>
    <include@www/libs.htms />
    <api path="chkFile">
        res.send(fs.existsSync(req.query.file))
    </api>
    <script>
        s.getElement("#mkFileForm").then((el)=>{
            el.addEventListener("submit",
                /**
                 * @param {Event} e
                 */
                function (e) {
                    e.preventDefault()
                    S("#err").text("")
                    
                    if(!S("#file")?.val()) return S("#err").text("Please enter file name")
                    
                    if(!S("#content")?.val()) return S("#err").text("Please enter file content")

                    let file = S("#file")?.val()
                    let content = S("#content")?.val()

                    console.log(file, content)

                    // s.get("<#chkFile>?file=" + "<ss>req.query.path || './'</ss>" + file, (text, status) => {
                    //     if(!JSON.parse(text)) console.log("UIENAINU")
                    // })

                    let obj = {
                        path: `<ss>req.query.path || './'</ss>/${file}`,
                        content: content
                    }

                    let q = new URLSearchParams(obj)

                    s.get(`<#mkFile>?${q.toString()}`, ()=>{document.location.reload()})
                }
            )
        })
    </script>
    <style>
        body, a, input, textarea, button {
            background-color: black;
            color: #0f0;
        }
        input, textarea, button, hr {
            border: #0f0 1px solid;
        }
    </style>
</head>

<body>
    <h1>Browse files</h1>
    <hr>
    <script type="module" context="ss">
        let uuh = fs.statSync(req.query.path || './')
        if (!uuh.isDirectory()) {
            console.log("yeah");
            `<a href="/browse/${req.query.path || './'}" download>download</a>\n<hr>`
        }
    </script>
    <ss>
        console.log("hi")
    </ss>
    <table>
        <tr>
            <th>File</th>
            <th>Size</th>
            <th>Last changed</th>
            <th>Actions</th>
        </tr>
        <tr>
            <td>
                <a href="?path=/">
                    /
                </a>
            </td>
            <td>
                &lt;DIR&gt;
            </td>
        </tr>
        <tr>
            <td>
                <a href="?path=C:\">
                    C:\
                </a>
            </td>
            <td>
                &lt;DIR&gt;
            </td>
        </tr>
        <tr>
            <td>
                <a href="?path=~">
                    ~
                </a>
            </td>
            <td>
                &lt;DIR&gt;
            </td>
        </tr>
        <tr>
            <td>
                <br>
            </td>
        </tr>
        <tr>
            <td>
                <a href="?path=./">
                    Home directory (./)
                </a>
            </td>
            <td>
                &lt;DIR&gt;
            </td>
        </tr>
        <tr>
            <td>
                <a href="?path=<ss>path.normalize(req.query.path + '/..');</ss>">
                    Parent directory (<ss>path.normalize(req.query.path + '/..');</ss>)
                </a>
            </td>
            <td>
                &lt;DIR&gt;
            </td>
        </tr>
        <tr>
            <td>
                <br>
            </td>
        </tr>
        <script type="module" context="ss">
            let uuh2 = fs.statSync(req.query.path || './')
            if (uuh2.isDirectory()) {
                const basePath = req.query.path || './'; // Get the path from query parameter, default to current directory
                const files = fs.readdirSync(basePath)
                    .map(file => {
                        const fullPath = path.join(basePath, file);
                        const stats = fs.statSync(fullPath);
                        return {
                            name: file,
                            isDirectory: stats.isDirectory(),
                            fullPath: fullPath,
                            stats: stats
                        };
                    });
                files.map((a, i) => {return a.isDirectory ? `\
    <tr>\
        <td>\
            <a href='${a.isDirectory ? "?path=" : "/browse?path="}${a.fullPath}' ${a.isDirectory ? "" : `download="${path.basename(a.fullPath)}"`}>${a.name}</a>
        </td>\
        <td>\
            &lt;DIR&gt;
        </td>\
        <td>\
            ${strftime('%H:%M %d.%m.%Y', a.stats.ctime)}
        </td>\
        <td>\
            <a href="#" hx-get="<#delFile>?path=${a.isDirectory ? "-rf " : ""}${a.fullPath}" hx-trigger="click" hx-target="hx-out">[DELETE]</a>\
        </td>\
    </tr>` : ""}).join("\n") +
                files.map((a, i) => {return a.isDirectory ? "" :`\
    <tr>\
        <td>\
            <a href='${a.isDirectory ? "?path=" : "/browse?path="}${a.fullPath}' ${a.isDirectory ? "" : `download="${path.basename(a.fullPath)}"`}>${a.name}</a>
        </td>\
        <td>\
            ${a.stats.size / 1000}KB\
        </td>\
        <td>\
            ${strftime('%H:%M %d.%m.%Y', a.stats.ctime)}
        </td>\
        <td>\
            <a href="#" hx-get="<#delFile>?path=${a.isDirectory ? "-rf " : ""}${a.fullPath}" hx-trigger="click" hx-target="hx-out">[DELETE]</a>\
        </td>\
    </tr>`}).join("\n")
            } else { "" }
        </script>
    </table>
    <hr>
    <form id="mkFileForm">
        <input type="text" name="file" id="file" placeholder="File path...">
        <br>
        <textarea id="content" placeholder="File content here..."></textarea>
        <br>
        <input type="submit" value="Submitt">
    </form>
    <span id="err" style="color: red;"></span>
    <script path="mkFile" context="api">
        (async ()=> {
            if(!req.query.path) return res.status(400).send("400")
            if(!req.query.content) return res.status(400).send("400")
            fs.writeFileSync(req.query.path, req.query.content)
        })()
    </script>
    <script path="delFile" context="api">
        (async ()=> {
            if(!req.query.path) return res.status(400).send("400")
            fs.unlinkSync(req.query.path)
        })()
    </script>
</body>

<hx-out style="display: none;"></hx-out>

</html>